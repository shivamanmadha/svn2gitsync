package com.exsys.common.business;

import java.io.*;

import com.exsys.fix.message.*;

/**
 *
 * <B>Fill</B> class defines a fill or partial fill of an order generated by the exchange 
 * Currently this class only
 * contains minimum number of attributes. This will be enhanced shortly
 * This class provides a constructor, which creates an empty <B>Fill, complete or partial</B>
 * based on the parameter, and use different <B>set</B> methods to populate the object. This constructor
 * is used by an application producing a Fill message, for example, order matching exchange 
 * application. Another constructor
 * constructs Fill object by taking RvMsg & subject name as parameter. This
 * constructor will be used by applications which recieve an TIBCO message
 * of type <B>FILL or PARTIAL</B> and constructs Order object based on this message
 * and use different <B>get</B> methods to get details about this object
 * <B>TradeResponseManager</B> class uses this constructor to construct business 
 * objects and invokes proper callback method of class <B>ITradeResponseHandler</B>
 * Applications need not have to use this constructor. Instead applications implement
 * <B>ITradeResponseHandler</B> interface and use TradeResponseManager to get application
 * level callbacks.
 */

public class Fill extends IBusinessObject
{
	private String request_id;
	private String response_id;
	private Integer quantity;
	private String  trade_price;
	private String  opp_broker;
	private Integer leaves_quantity;
	private Order ord;
	private String execTransType;
	private String execType;
	private String orderStatus;


	public Fill( FixExecutionReport msg, boolean partial, String sub ) 
	{
		if( partial )
		{
			type = IBusinessObject.PARTIAL;
		}
		else
		{
			type = IBusinessObject.FILL;
		}
		request_id = msg.getClOrderID();
	    trade_price  = msg.getLastPxAsString();
		response_id = msg.getExecID();
		quantity = new Integer(msg.getLastSharesAsString());
		leaves_quantity = new Integer(msg.getLeavesQtyAsString());
		opp_broker = msg.getExecBroker();

		subject = sub;
	}
	public Fill( FixFill msg, String sub ) 
	{
		if( msg.isPartial() )
		{
			type = IBusinessObject.PARTIAL;
		}
		else
		{
			type = IBusinessObject.FILL;
		}
		request_id = msg.getClOrderID();
	    trade_price  = msg.getLastPxAsString();
		response_id = msg.getExecID();
		quantity = new Integer(msg.getLastSharesAsString());
		leaves_quantity = new Integer(msg.getLeavesQtyAsString());
		opp_broker = msg.getExecBroker();

		subject = sub;
	}
	public Fill( String type )
	{
		this.type = new String(type);
		response_id = new String();
		request_id = new String();
		quantity = new Integer(0);
		leaves_quantity = new Integer(0);
		trade_price = new String();
		opp_broker = new String();
		subject = new String();
		
	}
	public  FixMessage getFixMsg()
	{
		FixFill fill = new FixFill( type.equals(IBusinessObject.PARTIAL));

		fill.setClOrderID(request_id);
		fill.setOrderID(request_id);
		fill.setLastPx(trade_price);
		fill.setExecID( response_id.toString());
		fill.setLastShares(quantity.toString());
		fill.setExecBroker(opp_broker);
		fill.setLeavesQty(leaves_quantity.toString());
		fill.setAvgPx("0.0");
		if(ord != null)
		{
			fill.setSymbol(ord.getSymbol());
			fill.setSide(translateToFixBuyOrSell(ord.getBuyOrSell()));
			//fill.setText(reason);
			
			//fill.setLeavesQty(request_open_quantity.toString());
			fill.setAccount(ord.getAccount());			
			
			
			String clOrderId = ord.getClientOrderId();
			request_id = clOrderId.substring(clOrderId.length()-8);		
			
			fill.setClOrderID(request_id);
			fill.setCumQty("0");
			fill.setExecID(response_id);
			fill.setExecType(execType);
			fill.setExecTransType(execTransType);
			fill.setOrdStatus(orderStatus);
			//fill.setLastPx("0");
			//fill.setLastShares("0");
			//fill.setOrderID(request_id);
			fill.setOrderQty(String.valueOf(ord.getQuantity()));
			fill.setOrdType(translateToFixOrderType(ord.getOrderType()));
			fill.setOrigClOrderID("0");
			//fill.setPrice(); ???
			fill.setSecurityDesc(ord.getSymbol());
			fill.setTransactTime(FixMessage.getUTCCurrentTime());
			fill.setTimeInForce(translateToFixTimeInForce(ord.getTimeInForce()));
			if(ord.getStopPrice() != null)
				fill.setStopPx(ord.getStopPrice());
			fill.setSecurityType(ord.getSecurityType());
			fill.setCorrelationClOrdID(ord.getCorrelationClientOrderId());			
			
			
			
			
			
		}
		
		return fill;
	}
	public Integer getLeavesQuantity()
	{
		return leaves_quantity;
	}
	public String getOppositeBroker()
	{
		return opp_broker;
	}
	public Integer getQuantity()
	{
		return quantity;
	}
	public String getRequestId()
	{
		return request_id;
	}
	public String getResponseId()
	{
		return response_id;
	}
	public String getSubject()
	{
		return subject;
	}
	public String getTradePrice()
	{
		return trade_price;
	}
	public String getType()
	{
		return type;
	}
	public Order getOrder()
	{
		return ord;
	}	
	public String getExecTransType()
	{
		return execTransType;
	}
	public String getExecType()
	{
		return execType;
	}
	public String getOrderStatus()
	{
		return orderStatus;
	}	
	public void print()
	{
		System.out.println("Message Type :" + type );
		System.out.println("Response Id :" + response_id );
		System.out.println("Request Id :" + request_id );
		System.out.println("Trade Price :" + trade_price );
		System.out.println("Quantity :" + quantity );
		System.out.println("Leaves Quantity :"+ leaves_quantity );
		System.out.println("Opposite Broker :"+ opp_broker );
	}
	public void setOrder( Order val)
	{
		ord = val;
	}	
	public void setLeavesQuantity( Integer val)
	{
		leaves_quantity = val;
	}
	public void setOppositeBroker( String val)
	{
		opp_broker = val;
	}
	public void setQuantity( Integer val)
	{
		quantity = val;
	}
	public void setRequestId( String val)
	{
		request_id = val;
	}
	public void setResponseId( String val)
	{
		response_id = val;
	}
	public void setSubject( String val )
	{
		subject = val;
	}
	public void setTradePrice( String val )
	{
		trade_price = val;
	}
	public void setType( String val )
	{
		type = val;
	}
	public void setExecTransType( String val )
	{
		execTransType = val;
	}
	public void setExecType( String val )
	{
		execType = val;
	}
	public void setOrderStatus( String val )
	{
		orderStatus = val;
	}			
	
	public String toString()
	{
		String priceStr = new String((getQuantity()).toString()+"@"+getTradePrice());
		String filString = new String("ORD: "+getRequestId()+" "+priceStr+" "+type+" "+ "OPP: "+getOppositeBroker());
		return filString;

	}
}
